#!/usr/bin/env node

require('dotenv').config();

/**
 * Script de Rotaci√≥n Autom√°tica de Claves
 * 
 * En un entorno real, este script:
 * 1. Genera una nueva API key
 * 2. Actualiza los secrets en GitHub/Render
 * 3. Valida que los servicios funcionen con la nueva clave
 * 4. Revoca la clave antigua
 */

const axios = require('axios');

// Colores para la consola
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  red: '\x1b[31m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function rotateApiKey() {
  log('\nüîÑ Iniciando Rotaci√≥n de Claves API', 'blue');
  log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n', 'blue');

  // Paso 1: Verificar clave actual
  log('1Ô∏è‚É£  Verificando clave actual...', 'yellow');
  const currentKey = process.env.WEATHER_API_KEY;
  
  if (!currentKey) {
    log('   ‚ùå No hay clave configurada', 'red');
    process.exit(1);
  }
  
  const maskedKey = currentKey.substring(0, 4) + '***' + currentKey.substring(currentKey.length - 4);
  log(`   ‚úÖ Clave actual: ${maskedKey}`, 'green');
  
  // Paso 2: Probar clave actual
  log('\n2Ô∏è‚É£  Probando clave actual...', 'yellow');
  try {
    const response = await axios.get(
      'https://api.openweathermap.org/data/2.5/weather',
      {
        params: {
          q: 'Madrid',
          appid: currentKey,
          units: 'metric'
        }
      }
    );
    log('   ‚úÖ Clave actual funciona correctamente', 'green');
  } catch (error) {
    log('   ‚ùå Error con clave actual', 'red');
    log(`   Detalle: ${error.message}`, 'red');
    process.exit(1);
  }

  // Paso 3: Simular generaci√≥n de nueva clave
  log('\n3Ô∏è‚É£  Generando nueva clave API...', 'yellow');
  log('   ‚ö†Ô∏è  SIMULACI√ìN - En producci√≥n:', 'yellow');
  log('   ‚Ä¢ Se llamar√≠a a la API del proveedor', 'yellow');
  log('   ‚Ä¢ Se generar√≠a una nueva clave', 'yellow');
  log('   ‚Ä¢ Se recibir√≠a la nueva clave', 'yellow');
  
  // Simular nueva clave
  const newKey = 'new_' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  const maskedNewKey = newKey.substring(0, 4) + '***' + newKey.substring(newKey.length - 4);
  log(`   ‚úÖ Nueva clave generada: ${maskedNewKey}`, 'green');

  // Paso 4: Actualizar secrets
  log('\n4Ô∏è‚É£  Actualizando secrets...', 'yellow');
  log('   üìù GitHub Secrets:', 'yellow');
  log('      SIMULACI√ìN - En producci√≥n usar√≠a GitHub API', 'yellow');
  log('   üìù Render Environment Variables:', 'yellow');
  log('      SIMULACI√ìN - En producci√≥n usar√≠a Render API', 'yellow');
  log('   ‚úÖ Secrets actualizados (simulado)', 'green');

  // Paso 5: Verificar nueva clave
  log('\n5Ô∏è‚É£  Verificando nueva clave...', 'yellow');
  log('   ‚ö†Ô∏è  SIMULACI√ìN - Verificaci√≥n omitida en modo demo', 'yellow');
  log('   ‚úÖ Nueva clave verificada (simulado)', 'green');

  // Paso 6: Desplegar con nueva clave
  log('\n6Ô∏è‚É£  Desplegando servicios con nueva clave...', 'yellow');
  log('   üîÑ Trigger redeploy en Render', 'yellow');
  log('   ‚è≥ Esperando despliegue...', 'yellow');
  log('   ‚úÖ Servicios desplegados (simulado)', 'green');

  // Paso 7: Revocar clave antigua
  log('\n7Ô∏è‚É£  Revocando clave antigua...', 'yellow');
  log('   ‚ö†Ô∏è  Esperando per√≠odo de gracia (24h recomendado)', 'yellow');
  log('   üìù Clave antigua marcada para revocaci√≥n', 'yellow');

  // Resumen
  log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'blue');
  log('‚úÖ Rotaci√≥n de claves completada exitosamente', 'green');
  log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n', 'blue');
  
  log('üìã Resumen:', 'blue');
  log(`   ‚Ä¢ Clave antigua: ${maskedKey}`, 'yellow');
  log(`   ‚Ä¢ Clave nueva:   ${maskedNewKey}`, 'green');
  log(`   ‚Ä¢ Servicios actualizados: GitHub, Render`, 'green');
  log(`   ‚Ä¢ Estado: ‚úÖ Operacional\n`, 'green');
  
  log('‚ö†Ô∏è  Pr√≥ximos pasos manuales:', 'yellow');
  log('   1. Verificar que la aplicaci√≥n funciona correctamente', 'yellow');
  log('   2. Monitorear logs por 24-48 horas', 'yellow');
  log('   3. Revocar clave antigua despu√©s del per√≠odo de gracia\n', 'yellow');
}

// Manejo de errores
process.on('unhandledRejection', (error) => {
  log('\n‚ùå Error no manejado:', 'red');
  log(error.message, 'red');
  process.exit(1);
});

// Ejecutar
rotateApiKey().catch((error) => {
  log('\n‚ùå Error en rotaci√≥n:', 'red');
  log(error.message, 'red');
  process.exit(1);
});
